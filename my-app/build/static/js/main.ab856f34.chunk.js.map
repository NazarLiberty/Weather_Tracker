{"version":3,"sources":["components/Forecast.js","components/Autoselect.js","components/Current.js","components/ForecastDaily.js","components/Content.js","App.js","index.js"],"names":["Forecast","props","week","elClass","status","activeTab","daily","map","e","i","loader","push","ForecastWeek","day","setTime","dt","slice","temp","Math","round","icon","weather","key","className","theme","backgroundColor","current","ForecastToday","src","alt","LocationSearchInput","handleChange","address","setState","handleSelect","geocodeByAddress","then","results","getLatLng","latLng","setLoader","fetch","originUrl","lat","lng","apiKey","respone","json","respData","document","getElementById","blur","action","catch","error","console","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","id","placeholder","suggestion","active","style","cursor","padding","borderRadius","description","React","Component","CurrentTime","useState","Date","now","unix","setUnix","setInterval","backgroundImage","Tabs","actionChangeTab","hours","minutes","seconds","fullDate","CurrentInfoItem","condition","humidity","text","clouds","feel","sunset","data","changeTab","tabWeek","tabHours","onClick","ForecastDaily","hoursCollection","ForecastHourly","time","Wrapper","setData","setClouds","setHumidity","setFeel","setSunset","hourly","setHourly","setCurrent","setAddress","setActiveTab","setTheme","themesList","filter","includes","log","feels_like","main","a","getDay","month","getMonth","dayNumber","getDate","year","getFullYear","getHours","getMinutes","getSeconds","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ab856f34.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Forecast.scss'\r\nimport '../styles/Content.scss'\r\nimport { setTime } from './Content'\r\n\r\nexport default function Forecast(props) {\r\n    let week = [];\r\n    let elClass = 'forecast '\r\n    if (props.status) {\r\n        if (!props.activeTab)\r\n            elClass += ' forecast--active'\r\n        props.status.daily.map((e, i) => {\r\n            if (!props.loader) {\r\n                if (i > 0 && i < 7) week.push(\r\n                    <ForecastWeek\r\n                        loader={props.loader}\r\n                        day={setTime(e.dt).day.slice(0, 3)}\r\n                        temp={Math.round(e.temp.day - 273.15)}\r\n                        icon={e.weather[0].icon}\r\n                        key={i}\r\n                    />)\r\n                else return null\r\n            }\r\n            else return null\r\n            return null\r\n        })\r\n\r\n    }\r\n\r\n    return <div className={elClass + \" \" + props.theme.backgroundColor}>\r\n        {props.current &&\r\n            <ForecastToday\r\n                icon={props.current.weather[0].icon}\r\n                temp={Math.round(props.current.temp - 273.15)}\r\n            />}\r\n        {week}\r\n    </div>\r\n}\r\nfunction ForecastToday(props) {\r\n    return <div className=\"forecast__today\">\r\n        <div className=\"forecast__icon forecast__icon-b--today\">\r\n            <img src={\"https://openweathermap.org/img/wn/\" + props.icon + \"@2x.png\"} className=\"forecast__icon\" alt=\"weather\" />\r\n        </div>\r\n        <div className=\"forecast__today-group\">\r\n            <div className=\"forecast__day forecast__day--today\">\r\n                Today\r\n        </div>\r\n            <div className=\"forecast__temp forecast__temp--today\">\r\n                {props.temp}Â°\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\nfunction ForecastWeek(props) {\r\n    return <>\r\n        {!props.loader &&\r\n            <div className=\"forecast__week-item animate__animated  animate__backInDown\">\r\n                <div className=\"forecast__day\">\r\n                    {props.day}\r\n                </div>\r\n                <div className=\"forecast__icon-b\">\r\n                    <img src={\"https://openweathermap.org/img/wn/\" + props.icon + \"@2x.png\"} className=\"forecast__icon\" alt=\"weather\" />\r\n                </div>\r\n                <div className=\"forecast__temp\">\r\n                    {props.temp}Â°\r\n        </div>\r\n            </div>\r\n        }\r\n    </>\r\n}","import React from 'react';\r\nimport PlacesAutocomplete from 'react-places-autocomplete';\r\nimport {\r\n    geocodeByAddress,\r\n    getLatLng,\r\n} from 'react-places-autocomplete';\r\nimport \"../styles/Autoselect.scss\";\r\nimport { apiKey, originUrl } from '../App'\r\n\r\nexport default class LocationSearchInput extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { address: '' };\r\n    }\r\n\r\n    handleChange = address => {\r\n        this.setState({ address });\r\n    };\r\n\r\n    handleSelect = address => {\r\n\r\n        geocodeByAddress(address)\r\n            .then(results => getLatLng(results[0]))\r\n            .then((latLng) => {\r\n                this.props.setLoader()\r\n                this.setState({ address });\r\n                fetch(originUrl + \"lat=\" + latLng.lat + \"&lon=\" + latLng.lng + apiKey)\r\n                    .then((respone) => {\r\n                        return respone.json()\r\n                    })\r\n                    .then((respData) => {\r\n                        document.getElementById('input__search').blur()\r\n                        this.props.action(respData, address)\r\n                    })\r\n\r\n            })\r\n\r\n            .catch(error => console.error('Error', error));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <PlacesAutocomplete\r\n                value={this.state.address}\r\n                onChange={this.handleChange}\r\n                onSelect={this.handleSelect}\r\n\r\n            >\r\n                {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n                    <div>\r\n                        <input\r\n                            id=\"input__search\"\r\n                            {...getInputProps({\r\n\r\n                                placeholder: 'Search Places ...',\r\n                                className: 'location-search-input current__input',\r\n                            })}\r\n                        />\r\n                        <div className=\"autocomplete-dropdown-container current__dropdown\">\r\n                            {loading && <div className=\"current__loading\">\r\n                                Loading...\r\n                                <div className=\"current__icon-b \">\r\n                                    <img src='./loader.png' className=\"current__icon animate__animated  animate__rotateOut\" alt=\"weather option\" />\r\n                                </div>\r\n                            </div>}\r\n                            {suggestions.map(suggestion => {\r\n                                const className = suggestion.active\r\n                                    ? 'suggestion-item--active'\r\n                                    : 'suggestion-item';\r\n                                // inline style for demonstration purpose\r\n                                const style = suggestion.active\r\n                                    ? {\r\n                                        backgroundColor: '#fafafa', cursor: 'pointer', padding: '5px 10px', borderRadius: \"10px\"\r\n                                    }\r\n                                    : { backgroundColor: '#ffffff', cursor: 'pointer', padding: '5px 10px', borderRadius: \"10px\" };\r\n                                return (\r\n                                    <div\r\n                                        {...getSuggestionItemProps(suggestion, {\r\n                                            className,\r\n                                            style,\r\n                                        })}\r\n                                    >\r\n                                        <span>{suggestion.description}</span>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </PlacesAutocomplete>\r\n        );\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport '../styles/Current.scss'\r\nimport LocationSearchInput from './Autoselect';\r\nimport { setTime } from './Content'\r\nimport '../styles/Content.scss'\r\n\r\nexport default function CurrentTime(props) {\r\n    const [unix, setUnix] = useState(Date.now() / 1000)\r\n    function actionChangeTab() {\r\n        props.actionChangeTab()\r\n    }\r\n    setInterval(function () {\r\n        setUnix(Date.now() / 1000)\r\n    }, 1000)\r\n    function getData(data, address) {\r\n        props.action(data, address)\r\n    }\r\n    return <>\r\n        <div className={\"current animate__animated animate__fadeIn \" + props.theme.backgroundImage}>\r\n            {props.status &&\r\n                <Tabs\r\n                    theme={props.theme}\r\n                    activeTab={props.activeTab}\r\n                    action={actionChangeTab}\r\n                />}\r\n            <div className=\"current__info-container\">\r\n                <div className=\"current__time\">\r\n                    <p className=\"current__timestamp\">\r\n                        {setTime(unix).hours}:{setTime(unix).minutes}\r\n                        <span className=\"current__seconds\">:{setTime(unix).seconds} </span>\r\n                    </p>\r\n                    <p className=\"current__day\">\r\n                        {setTime(Date.now() / 1000).fullDate}\r\n                    </p>\r\n                </div>\r\n                <div className=\"current__info \">\r\n                    {props.loader && <div className=\"current__loading\">\r\n                        Loading...\r\n                                <div className=\"current__icon-b \">\r\n                            <img src='./loader.png'\r\n                                className=\"current__icon animate__animated  animate__rotateOut\"\r\n                                alt=\"weather option\" />\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                    {!props.loader && props.status &&\r\n                        <>\r\n                            <CurrentInfoItem src=\"./humidity.png\" condition={props.humidity + \"%\"} text=\"humidity is\" />\r\n                            <CurrentInfoItem src=\"./cloud.png\" condition={props.clouds + \"%\"} text=\"clouds is \" />\r\n                            <CurrentInfoItem src=\"./feeling.png\" condition={props.feel + \" C\"} text=\"feels like \" />\r\n                            <CurrentInfoItem src=\"./sunset.png\" condition={props.sunset} text=\"sunset is\" />\r\n                        </>}\r\n                </div>\r\n            </div>\r\n            <div className=\"current__search\">\r\n                <LocationSearchInput action={getData} setLoader={props.setLoader} />\r\n                <div className=\"current__address\">\r\n                    {props.address}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </>\r\n}\r\nfunction CurrentInfoItem(props) {\r\n    return <div className=\"current__item animate__animated  animate__bounceInLeft\">\r\n        <div className=\"current__icon-b \">\r\n            <img src={props.src} className=\"current__icon\" alt=\"weather option\" />\r\n        </div>\r\n        <div className=\"current__text\"> {props.text} {props.condition} </div>\r\n    </div>\r\n}\r\nfunction Tabs(props) {\r\n    function changeTab() {\r\n        props.action()\r\n    }\r\n    let tabWeek = \"tabs__item\";\r\n    let tabHours = \"tabs__item\";\r\n    if (props.activeTab) tabHours += \" tabs__item--active\"\r\n    else tabWeek += \" tabs__item--active\"\r\n    return <div className={\"tabs \" + props.theme.backgroundColor + \" animate__animated  animate__bounceInRight\"}>\r\n        <div className={tabWeek} onClick={changeTab}>\r\n            Week\r\n    </div>\r\n        <div className={tabHours} onClick={changeTab}>\r\n            12 Hours\r\n    </div>\r\n    </div>\r\n}","import React from 'react';\r\nimport '../styles/ForecastDaily.scss'\r\nimport '../styles/Content.scss'\r\nimport { setTime } from './Content'\r\n\r\nexport default function ForecastDaily(props) {\r\n    let elClass = \"forecast-daily animate__animated animate__fadeInRight\"\r\n    if (props.activeTab) elClass += \" forecast-daily--active\"\r\n    let hoursCollection = []\r\n    for (let i = 1; i <= 12; i++) {\r\n        hoursCollection.push(<ForecastHourly\r\n            time={setTime(props.hours[i].dt).hours + \":00\"}\r\n            key={i}\r\n            temp={Math.round(props.hours[i].temp - 273.15)}\r\n            icon={props.hours[i].weather[0].icon}\r\n        />)\r\n    }\r\n\r\n    return <div className={elClass + \" \" + props.theme.backgroundColor}>\r\n        {hoursCollection}\r\n    </div>\r\n}\r\nfunction ForecastHourly(props) {\r\n    return <div className=\"forecast-daily__hour\">\r\n        <div className=\"forecast-daily__time\">{props.time}</div>\r\n        <div className=\"forecast-daily__icon-b\">\r\n            <img src={\"https://openweathermap.org/img/wn/\" + props.icon + \".png\"} alt=\"weather\" className=\"forecast-daily__icon\" />\r\n        </div>\r\n        <div className=\"forecast-daily__temp\">{props.temp}Â°</div>\r\n\r\n    </div>\r\n}","import React, { useState } from 'react';\r\nimport '../styles/Content.scss'\r\nimport Foreacast from './Forecast'\r\nimport CurrentTime from './Current'\r\nimport ForecastDaily from './ForecastDaily'\r\n\r\nexport default function Wrapper(props) {\r\n    const [data, setData] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const [clouds, setClouds] = useState(null)\r\n    const [humidity, setHumidity] = useState(null)\r\n    const [feel, setFeel] = useState(null)\r\n    const [sunset, setSunset] = useState(null)\r\n    const [hourly, setHourly] = useState(null)\r\n    const [current, setCurrent] = useState(null)\r\n    const [address, setAddress] = useState('')\r\n    const [activeTab, setActiveTab] = useState(false)\r\n    const [theme, setTheme] = useState(null)\r\n    function themesList() {\r\n        let atmosphere = [\"Mist\", \"Smoke\", \"Haze\", \"Dust\", \"Fog\", \"Sand\", \"Dust\", \"Ash\", \"Squall\", \"Tornado\"]\r\n        let atmosphereCheck = atmosphere.filter(e => theme === e)\r\n        if (atmosphereCheck.includes(theme))\r\n            return {\r\n                backgroundImage: \"fog-bg\",\r\n                backgroundColor: \"fog\"\r\n            }\r\n        else if (theme === \"Rain\") return {\r\n            backgroundImage: \"rain-bg\",\r\n            backgroundColor: \"rain\"\r\n        }\r\n        else if (theme === \"Clouds\") return {\r\n            backgroundImage: \"clouds-bg\",\r\n            backgroundColor: \"clouds\"\r\n        }\r\n        else if (theme === \"Thunderstorm\") return {\r\n            backgroundImage: \"thunderstorm-bg\",\r\n            backgroundColor: \"thunderstorm\"\r\n        }\r\n        else return {\r\n            backgroundImage: \"sunny-bg\",\r\n            backgroundColor: \"sunny\"\r\n        }\r\n    }\r\n\r\n    function actionGetData(data, address) {\r\n        console.log(data)\r\n        setLoader(false)\r\n        setData(data)\r\n        setClouds(data.current.clouds)\r\n        setHumidity(data.current.humidity)\r\n        setSunset(data.current.sunset)\r\n        setFeel(data.current.feels_like)\r\n        setHourly(data.hourly)\r\n        setCurrent(data.current)\r\n        setAddress(address)\r\n        setTheme(data.current.weather[0].main)\r\n    }\r\n\r\n    function actionLoader() {\r\n        setLoader(true)\r\n    }\r\n    function actionChangeTab() {\r\n        setActiveTab(!activeTab)\r\n    }\r\n    return <>\r\n        <div className={\"background \" + themesList().backgroundImage}></div>\r\n        <div className=\"wrapper \">\r\n            <div className=\"weather\">\r\n                <CurrentTime\r\n                    theme={themesList()}\r\n                    actionChangeTab={actionChangeTab}\r\n                    activeTab={activeTab}\r\n                    address={address}\r\n                    setLoader={actionLoader}\r\n                    loader={loader}\r\n                    status={data}\r\n                    action={actionGetData}\r\n                    clouds={clouds}\r\n                    humidity={humidity}\r\n                    sunset={setTime(sunset).hours + \":\" + setTime(sunset).minutes} feel={Math.round(feel - 273.15)}\r\n                />\r\n                <Foreacast\r\n                    theme={themesList()}\r\n                    activeTab={activeTab}\r\n                    loader={loader}\r\n                    status={data}\r\n                    current={current} />\r\n\r\n                {hourly && <ForecastDaily\r\n                    theme={themesList()}\r\n                    activeTab={activeTab}\r\n                    hours={hourly}\r\n                />}\r\n            </div>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport function setTime(unix) {\r\n    let timestamp = unix;\r\n    let a = new Date(timestamp * 1000);\r\n    let daysList = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    let monthList = ['January', 'February', 'March', 'April', 'May', 'June', 'Jule', 'August', 'September', 'October', 'November', 'December']\r\n    let day = daysList[a.getDay()]\r\n    let month = monthList[a.getMonth()]\r\n    let dayNumber = a.getDate()\r\n    let year = a.getFullYear()\r\n    let fullDate = day + \", \" + dayNumber + \" \" + month + \" \" + year;\r\n    let hours = a.getHours()\r\n    let minutes = a.getMinutes()\r\n    let seconds = a.getSeconds()\r\n    if (hours < 10) {\r\n        hours = '0' + hours\r\n    }\r\n    if (minutes < 10) {\r\n        minutes = '0' + minutes\r\n    }\r\n    if (seconds < 10) {\r\n        seconds = '0' + seconds\r\n    }\r\n    return {\r\n        seconds: seconds,\r\n        minutes: minutes,\r\n        hours: hours,\r\n        day: day,\r\n        month: month,\r\n        year: year,\r\n        dayNumber: dayNumber,\r\n        fullDate: fullDate\r\n\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './styles/App.scss';\r\nimport Wrapper from './components/Content'\r\n\r\nexport let apiKey = '&appid=ae64f4f04a5e48e2fc0edabf290d80d0'\r\nexport let originUrl = 'https://api.openweathermap.org/data/2.5/onecall?'\r\n\r\nexport default function App() {\r\n\r\n    return <>\r\n        <Wrapper />\r\n    </>\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}